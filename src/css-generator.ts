import { ClassMapping } from './types';
import * as fs from 'fs';
import * as path from 'path';

export class CSSGenerator {
  generateCSS(mappings: ClassMapping[], outputPath: string): void {
    const cssContent = this.buildCSSContent(mappings);
    
    // Ensure output directory exists
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    fs.writeFileSync(outputPath, cssContent, 'utf-8');
  }

  private buildCSSContent(mappings: ClassMapping[]): string {
    const header = `/* Generated by twmap - ${new Date().toISOString()} */\n/* Do not edit this file manually */\n\n`;
    
    const cssRules = mappings
      .sort((a, b) => a.generated.localeCompare(b.generated))
      .map(mapping => this.createCSSRule(mapping))
      .join('\n\n');

    return header + cssRules + '\n';
  }

  private createCSSRule(mapping: ClassMapping): string {
    return `.${mapping.generated} {\n  @apply ${mapping.original};\n}`;
  }

  generateStats(mappings: ClassMapping[]): string {
    const totalMappings = mappings.length;
    const originalSize = mappings.reduce((sum, m) => sum + m.original.length, 0);
    const optimizedSize = mappings.reduce((sum, m) => sum + m.generated.length, 0);
    const savings = originalSize - optimizedSize;
    const savingsPercent = originalSize > 0 ? ((savings / originalSize) * 100).toFixed(1) : '0';

    return `
Statistics:
- Total class mappings: ${totalMappings}
- Original size: ${originalSize} characters
- Optimized size: ${optimizedSize} characters
- Savings: ${savings} characters (${savingsPercent}%)
`;
  }
}
