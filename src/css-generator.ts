import { ClassMapping } from "./types";
import * as fs from "fs";
import * as path from "path";

export class CSSGenerator {
  async generateCSS(
    mappings: ClassMapping[],
    outputPath: string,
    compress = false,
  ): Promise<void> {
    let cssContent = this.buildCSSContent(mappings);

    // Compress/minify CSS using cssnano
    if (compress) {
      const postcss = await import("postcss");
      const cssnano = await import("cssnano");
      const result = await postcss
        .default([cssnano.default])
        .process(cssContent, { from: undefined });
      cssContent = result.css;
    }

    // Ensure output directory exists
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    fs.writeFileSync(outputPath, cssContent, "utf-8");
  }

  private buildCSSContent(mappings: ClassMapping[]): string {
    const header = `/*\n  Generated by twmap\n  https://www.npmjs.com/package/@cojocarudavid/twmap\n  https://github.com/cojocaru-david/twmap\n\n  Author: Cojocaru David (contact@cojocarudavid.me)\n  License: MIT\n\n  Description: This CSS file was automatically generated by twmap, a CLI tool that scans HTML, JSX, and TSX files to extract Tailwind utility classes and generates optimized CSS mappings with short class names.\n  - Consistent mapping: Same utility string always generates the same short class name\n  - Multiple modes: hash, incremental, or readable class name generation\n  - Fast, configurable, and safe: see project links above for documentation\n\n  Do not edit this file manually.\n  Generation date: ${new Date().toISOString()}\n*/\n\n`;

    const cssRules = mappings
      .sort((a, b) => a.generated.localeCompare(b.generated))
      .map((mapping) => this.createCSSRule(mapping))
      .join("\n\n");

    return header + cssRules + "\n";
  }

  private createCSSRule(mapping: ClassMapping): string {
    return `.${mapping.generated} {\n  @apply ${mapping.original};\n}`;
  }

  generateStats(mappings: ClassMapping[]): string {
    const totalMappings = mappings.length;
    const originalSize = mappings.reduce(
      (sum, m) => sum + m.original.length,
      0,
    );
    const optimizedSize = mappings.reduce(
      (sum, m) => sum + m.generated.length,
      0,
    );
    const savings = originalSize - optimizedSize;
    const savingsPercent =
      originalSize > 0 ? ((savings / originalSize) * 100).toFixed(1) : "0";

    return `
Statistics:
- Total class mappings: ${totalMappings}
- Original size: ${originalSize} characters
- Optimized size: ${optimizedSize} characters
- Savings: ${savings} characters (${savingsPercent}%)
`;
  }
}
